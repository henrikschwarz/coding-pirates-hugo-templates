[{"id":0,"href":"/docs/uger/uge1/install/","title":"Intaller Arduino","section":"Uge 1 - 3","content":"Installer Arduino IDE. #  For at programmere arduino skal vi bruge Arduino IDE. Du kan hente Arduino IDE på det på det her link. Du skal ikke hente Windows Store versionen, fordi den laver segmentationsfejl når man skal upload på nogen boards.\nCH340 Driver\n"},{"id":1,"href":"/docs/hjem/","title":"Introduction","section":"Docs","content":"Velkommen til coding pirates Odense elektronik! #  Det her er siden for Elektronik workshoppen for coding pirates, hvor vi skal arbejde med Arduino og bygge fede robotter og projekter!\nVigtig information #  Undervisere:\n Henrik Schwarz Esben Damkjær Sørensen  Sted: Odense Hovedbiblotek (Østre Stationsvej 15, 5000 Odense)\nTid: Onsdag Kl 17:00-19:00\nTing du skal have med #   Bærbar med usb 3.0 eller 2.0 Godt humør ;)  Resources: #   Arduino reference  "},{"id":2,"href":"/docs/uger/","title":"Tidsplan og uger","section":"Docs","content":"Uge 1 #  Det her er siden for første uge af workshop! Det vi bruger første uge på intromateriale.\n"},{"id":3,"href":"/docs/uger/uge1/eksempel-1/","title":"Eksempel 1 - LED","section":"Uge 1 - 3","content":"Eksempel 1 - LED control #  Første Eksempel er for at få en led til at blinke. Det er en af de mest klassiske programmer på Arduinoen.\nFølgende billede viser hvordan de elektroniske komponenter skal kobles sammen: De følgende 4 eksempler, viser hvordan, det samme resultat, kan skrives på forskellige måder.\nKodeeksempel 1 - Få en LED til at blinke #  const int ledPin = 7;  void setup() {  // Opsæt kommunikationshastighed med PC  Serial.begin(115200);   // Opsæt ledPin til at blive anvendt som output  pinMode(ledPin, OUTPUT); }  void loop() {  // Sæt udgangen til et højt signal  digitalWrite(ledPin, HIGH);   // Send besked til PC  Serial.println(\u0026#34;LED\u0026#39;en blev tændt.\u0026#34;);   // Vent 1000 millisekunder  delay(1000);   // Sæt udgangen til et lavt signal  digitalWrite(ledPin, LOW);   // Send besked til PC  Serial.println(\u0026#34;LED\u0026#39;en blev slukket.\u0026#34;);   // Vent 1000 millisekunder  delay(1000); } Kodeeksempel 2 - Få LED til at blinke vha. variabel #  Kodeeksempel 3 - Få LED til at blinke ved at læse pinværdi, og gemme i variabel #  Kodeeksempel 4 - Få LED til at blinke ved at læse pinværdi #  "},{"id":4,"href":"/docs/uger/uge1/eksempel-2/","title":"Eksempel 2 - LED \u0026 Tactile button","section":"Uge 1 - 3","content":"Eksempel 2 - LED control vha. input og knap #  I andet eksempel skal du arbejde med input pins på Arduinoen. I denne øvelse skal du få en knap til at lyse, når der trykkes på en knap.\nFølgende billede viser hvordan de elektroniske komponenter skal kobles sammen: const int ledPin = 8; const int inputPin = 7;  void setup() {   // Opsæt kommunikationshastighed med PC  Serial.begin(115200);   // Opsæt ledPin til at blive anvendt som output  pinMode(ledPin, OUTPUT);   // Opsæt inputPin til at blive anvendt som input  pinMode(inputPin, INPUT); }  void loop() {  // Læs signalet på inputPin og gem resultatet i input  bool input = digitalRead(inputPin);   // Sæt outputtet på ledPin til den læste værdi på inputPin  digitalWrite(ledPin, input);   // Vent 100 millisekunder  delay(100); } Kodeeksempel 2 - Få LED til at lyse og sende tekst til PC ved ændring i input state #  const int ledPin = 8; const int inputPin = 7;  bool lastState = false;  void setup() {   // Opsæt kommunikationshastighed med PC  Serial.begin(115200);   // Opsæt ledPin til at blive anvendt som output  pinMode(ledPin, OUTPUT);   // Opsæt inputPin til at blive anvendt som input  pinMode(inputPin, INPUT); }  void loop() {  // Læs signalet på inputPin og gem resultatet i input  bool input = digitalRead(inputPin);   // Tjek om input har ændret sig siden sidste læsning  if (input != lastState) {  // Skriv tekst til PC afhængig af inputtets værdi  if (input) {  Serial.println(\u0026#34;Knappen er trykket ned.\u0026#34;);  } else {  Serial.println(\u0026#34;Knappen er sluppet.\u0026#34;);  }  }   lastState = input;   // Sæt outputtet på ledPin til den læste værdi på inputPin  digitalWrite(ledPin, input);   // Vent 100 millisekunder  delay(100); } "},{"id":5,"href":"/docs/uger/uge1/eksempel-3/","title":"Eksempel 3 - LED \u0026 Potentiometer","section":"Uge 1 - 3","content":"Eksempel 3 - LED PWM control vha. analogt input og potentiometer #  I tredje eksempel skal du arbejde med analoge input pins på Arduinoen. I denne øvelse skal du få en LED til at lyse proportionelt med et potentiometers position.\nFølgende billede viser hvordan de elektroniske komponenter skal kobles sammen: Kodeeksempel 1 - Få en LED til at lyse proportionelt med potentiometer #  "},{"id":6,"href":"/docs/uger/komponenter/keypad/","title":"Keypad eksemepel kode og setup","section":"Komponenter","content":"Setup #  Bibloteket #  Installer biblioteket fra Arduino IDE: Kode eksempler: #  #include \u0026lt;Keypad.h\u0026gt; const int ROW_NUM = 4; //four rows const int COLUMN_NUM = 4; //four columns  char keys[ROW_NUM][COLUMN_NUM] = {  {\u0026#39;1\u0026#39;,\u0026#39;2\u0026#39;,\u0026#39;3\u0026#39;, \u0026#39;A\u0026#39;},  {\u0026#39;4\u0026#39;,\u0026#39;5\u0026#39;,\u0026#39;6\u0026#39;, \u0026#39;B\u0026#39;},  {\u0026#39;7\u0026#39;,\u0026#39;8\u0026#39;,\u0026#39;9\u0026#39;, \u0026#39;C\u0026#39;},  {\u0026#39;*\u0026#39;,\u0026#39;0\u0026#39;,\u0026#39;#\u0026#39;, \u0026#39;D\u0026#39;} };  byte pin_rows[ROW_NUM] = {9, 8, 7, 6}; //connect to the row pinouts of the keypad byte pin_column[COLUMN_NUM] = {5, 4, 3, 2}; //connect to the column pinouts of the keypad  Keypad keypad = Keypad( makeKeymap(keys), pin_rows, pin_column, ROW_NUM, COLUMN_NUM );  void setup(){  Serial.begin(9600); }  void loop(){  char key = keypad.getKey();   if (key){  Serial.println(key);  } } Keypad kommandoer #  Det her er kommandoer som Keypad tager:\n keys[ROW_NUM][COLUMN_NUM] = {'1','2','3', 'A'}; - Definerer en array med 4 rækker og 4 kolonner. pin_column[COLUMN_NUM] = {5, 4, 3, 2}; - Pins for kolonnerne. pin_rows[ROW_NUM] = {9, 8, 7, 6}; - Pins for rækkerne. Keypad keypad = Keypad( makeKeymap(keys), pin_rows, pin_column, ROW_NUM, COLUMN_NUM ); - Initialiserer Keypad med 4 rækker og 4 kolonner. char key = keypad.getKey(); - Returnerer den næste tast som er trykket på.  Kilde #  Kilde\n"},{"id":7,"href":"/docs/uger/komponenter/lcd_i2c/","title":"LCD eksemepel kode og setup","section":"Komponenter","content":"Setup #  Bibloteket #  Installer biblioteket fra Arduino IDE: Kode eksempler: #  #include \u0026lt;Wire.h\u0026gt; // Library for I2C communication#include \u0026lt;LiquidCrystal_I2C.h\u0026gt; // Library for LCD // Wiring: SDA pin is connected to A4 and SCL pin to A5. // Connect to LCD via I2C, default address 0x27 (A0-A2 not jumpered) LiquidCrystal_I2C lcd = LiquidCrystal_I2C(0x27, 16, 2); // Change to (0x27,20,4) for 20x4 LCD.  void setup() {  // Initiate the LCD:  lcd.init();  lcd.backlight(); }  void loop() {  lcd.setCursor(2, 0); // Set the cursor on the third column and first row.  lcd.print(\u0026#34;Hello World!\u0026#34;); // Print the string \u0026#34;Hello World!\u0026#34;  lcd.setCursor(2, 1); //Set the cursor on the third column and the second row (counting starts at 0!).  lcd.print(\u0026#34;LCD tutorial\u0026#34;); } Kommandoer: #  Det her er kommandoer som LCD tager:\n LiquidCrystal_I2C lcd = LiquidCrystal_I2C(0x27, 16, 2); - Initialiserer LCD med 16 coloner og 2 rækker. lcd.begin(16, 2); - Initialiser LCD med 16 kolonner og 2 rader. lcd.clear(); - Slet alt indholdet af LCD\u0026rsquo;en. lcd.setCursor(0, 0); - Sæt cursoret på 1. kolonne og 1. rad. lcd.print(\u0026quot;Hello World!\u0026quot;); - Print \u0026ldquo;Hello World!\u0026rdquo; på LCD\u0026rsquo;en. lcd.setCursor(0, 1); - Sæt cursoren på 1. kolonne og 2. rad.  Kilde #  Kilde\n"},{"id":8,"href":"/docs/uger/komponenter/rfid/","title":"RFID eksemepel kode og setup","section":"Komponenter","content":"Setup #  Ledningerne for RFID modulet: Og en tabel over forbindelserne: Bibloteket #  Installer biblioteket fra Arduino IDE: Kode eksempler: #   #include \u0026lt;SPI.h\u0026gt;#include \u0026lt;MFRC522.h\u0026gt; #define SS_PIN 10 #define RST_PIN 5  MFRC522 rfid(SS_PIN, RST_PIN);  void setup() {  Serial.begin(9600);  SPI.begin(); // init SPI bus  rfid.PCD_Init(); // init MFRC522   Serial.println(\u0026#34;Tap RFID/NFC Tag on reader\u0026#34;); }  void loop() {  if (rfid.PICC_IsNewCardPresent()) { // new tag is available  if (rfid.PICC_ReadCardSerial()) { // NUID has been readed  MFRC522::PICC_Type piccType = rfid.PICC_GetType(rfid.uid.sak);  //Serial.print(\u0026#34;RFID/NFC Tag Type: \u0026#34;);  //Serial.println(rfid.PICC_GetTypeName(piccType));   // print NUID in Serial Monitor in the hex format  Serial.print(\u0026#34;UID:\u0026#34;);  for (int i = 0; i \u0026lt; rfid.uid.size; i++) {  Serial.print(rfid.uid.uidByte[i] \u0026lt; 0x10 ? \u0026#34; 0\u0026#34; : \u0026#34; \u0026#34;);  Serial.print(rfid.uid.uidByte[i], HEX);  }  Serial.println();   rfid.PICC_HaltA(); // halt PICC  rfid.PCD_StopCrypto1(); // stop encryption on PCD  }  } } Kode med servo: #  /* * Created by ArduinoGetStarted.com * * This example code is in the public domain * * Tutorial page: https://arduinogetstarted.com/tutorials/arduino-rfid-nfc-servo-motor */  #include \u0026lt;SPI.h\u0026gt;#include \u0026lt;MFRC522.h\u0026gt;#include \u0026lt;Servo.h\u0026gt; #define SS_PIN 10 #define RST_PIN 9 #define SERVO_PIN A5  MFRC522 rfid(SS_PIN, RST_PIN); Servo servo;  byte authorizedUID[4] = {0xFF, 0xFF, 0xFF, 0xFF}; int angle = 0; // the current angle of servo motor  void setup() {  Serial.begin(9600);  SPI.begin(); // init SPI bus  rfid.PCD_Init(); // init MFRC522  servo.attach(SERVO_PIN);  servo.write(angle); // rotate servo motor to 0°   Serial.println(\u0026#34;Tap RFID/NFC Tag on reader\u0026#34;); }  void loop() {  if (rfid.PICC_IsNewCardPresent()) { // new tag is available  if (rfid.PICC_ReadCardSerial()) { // NUID has been readed  MFRC522::PICC_Type piccType = rfid.PICC_GetType(rfid.uid.sak);   if (rfid.uid.uidByte[0] == authorizedUID[0] \u0026amp;\u0026amp;  rfid.uid.uidByte[1] == authorizedUID[1] \u0026amp;\u0026amp;  rfid.uid.uidByte[2] == authorizedUID[2] \u0026amp;\u0026amp;  rfid.uid.uidByte[3] == authorizedUID[3] ) {  Serial.println(\u0026#34;Authorized Tag\u0026#34;);   // change angle of servo motor  if (angle == 0)  angle = 90;  else //if(angle == 90)  angle = 0;   // control servo motor arccoding to the angle  servo.write(angle);  Serial.print(\u0026#34;Rotate Servo Motor to \u0026#34;);  Serial.print(angle);  Serial.println(\u0026#34;°\u0026#34;);  } else {  Serial.print(\u0026#34;Unauthorized Tag with UID:\u0026#34;);  for (int i = 0; i \u0026lt; rfid.uid.size; i++) {  Serial.print(rfid.uid.uidByte[i] \u0026lt; 0x10 ? \u0026#34; 0\u0026#34; : \u0026#34; \u0026#34;);  Serial.print(rfid.uid.uidByte[i], HEX);  }  Serial.println();  }   rfid.PICC_HaltA(); // halt PICC  rfid.PCD_StopCrypto1(); // stop encryption on PCD  }  } } Kilde: #  Kilde\n"},{"id":9,"href":"/docs/uger/komponenter/rtc/","title":"RTC eksemepel kode og setup","section":"Komponenter","content":"RTC Ledninger #  RTC Biblotek #  Først gå ind i Manage Libraries i Arduino IDE. Så Skriv RTClib i søgefeltet og klik på Install Library RTC kode #  Setup code for vores RTC:\n #include \u0026lt;RTClib.h\u0026gt; RTC_DS3231 rtc; // Definerer en RTC klasse  void setup () {  Serial.begin(9600);   // SETUP RTC MODULE  if (! rtc.begin()) {  Serial.println(\u0026#34;Couldn\u0026#39;t find RTC\u0026#34;);  while (1);  }   // Sæt RTC tid og data til computerens tid og dato  rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));  } Nu skal vi lave en funktion til at læse tid og dato fra RTC modulet.\nvoid loop(){  DateTime now = rtc.now();  Serial.print(\u0026#34;It is now \u0026#34;);  Serial.print(now.hour());  Serial.print(\u0026#34;:\u0026#34;);  Serial.print(now.minute());  Serial.print(\u0026#34;:\u0026#34;);  Serial.print(now.second());  Serial.print(\u0026#34; \u0026#34;);  Serial.print(now.day());  Serial.print(\u0026#34;/\u0026#34;);  Serial.print(now.month());  Serial.print(\u0026#34;/\u0026#34;);  Serial.print(now.year());  Serial.println(); } For at printe det på vores LCD kan vi bruge:\n void printToLCD(DateTime now, LiquidCrystalI2C lcd){  lcd.setCursor(0, 1);  lcd.print(\u0026#34;TIME\u0026#34;);  lcd.print(\u0026#34; \u0026#34;);  lcd.print(now.hour());  lcd.print(\u0026#39;:\u0026#39;);  lcd.print(now.minute());  lcd.print(\u0026#39;:\u0026#39;);  lcd.print(now.second());  lcd.print(\u0026#34; \u0026#34;);   lcd.setCursor(0, 0);  lcd.print(\u0026#34;DATE\u0026#34;);  lcd.print(\u0026#34; \u0026#34;);  lcd.print(now.day());  lcd.print(\u0026#39;/\u0026#39;);  lcd.print(now.month());  lcd.print(\u0026#39;/\u0026#39;);  lcd.print(now.year());  lcd.print(\u0026#34; \u0026#34;); } RTC kommandoer #  Det her er kommandoer som RTC tager:\n rtc.adjust(DateTime(F(__DATE__), F(__TIME__))); - Sætter RTC modulet til computerens tid og dato. DateTime tidspunkt = rtc.now(); - Returnerer en DateTime objekt med computerens tid og dato og gemmer det i en variabel som hedder tidspunkt. tidspunkt.hour(); - Returnerer time tal ud fra vores variabel tidspunkt. tidspunkt.minute(); - Returnerer minut tal ud fra vores variabel tidspunkt. tidspunkt.second(); - Returnerer sekund tal ud fra vores variabel tidspunkt. tidspunkt.day(); - Returnerer dag tal ud fra vores variabel tidspunkt. tidspunkt.month(); - Returnerer måned tal ud fra vores variabel tidspunkt. tidspunkt.year(); - Returnerer år tal ud fra vores variabel tidspunkt.  Kilde #  Kilde\n"},{"id":10,"href":"/docs/uger/komponenter/servo/","title":"Servo eksemepel kode og setup","section":"Komponenter","content":"Servo ledninger #  Servo eksempel kode #  #include \u0026lt;Servo.h\u0026gt; Servo myservo; // create servo object to control a servo int pos = 0; // variable to store the servo position  void setup() {  myservo.attach(9); // attaches the servo on pin 9 to the servo object }  void loop() {  for (pos = 0; pos \u0026lt;= 180; pos += 1) { // goes from 0 degrees to 180 degrees  // in steps of 1 degree  myservo.write(pos); // tell servo to go to position in variable \u0026#39;pos\u0026#39;  delay(15); // waits 15ms for the servo to reach the position  }  for (pos = 180; pos \u0026gt;= 0; pos -= 1) { // goes from 180 degrees to 0 degrees  myservo.write(pos); // tell servo to go to position in variable \u0026#39;pos\u0026#39;  delay(15); // waits 15ms for the servo to reach the position  } } Servo kommandoer #  Det her er kommandoer som Servo tager:\n Servo myservo; - definerer et servo objekt som kan kontrollere en servo der gemmes i variablen myservo. myservo.attach(9); - sætter servo objektet til at kontrollere servo på pin 9 myservo.write(pos); - sætter servo objektet til at gå til positionen i variablen pos. Det kan være en værdi i mellem 0 og 180.  Kilder #   Servo library  "},{"id":11,"href":"/docs/uger/uge1/eksempel-4/","title":"Eksempel 4 - Buzzer","section":"Uge 1 - 3","content":"Eksempel 1 - Buzzer #  I det her eksempel skal vi sætte en buzzer op. For at gøre det skal vi bruge det her el-diagram:\nEksempel 1 - Buzzer kode #  For at få buzzeren til at virke skal vi bruge tone og noTone som laver bølger med forskellige frekvenser og sender det til buzzeren.\n#define BUZZER_PIN 8 // Sæt buzzer pin int frekvens = 330;  void setup() {  pinMode(8, OUTPUT); }  void loop() {  tone(BUZZER_PIN, frekvens); } "},{"id":12,"href":"/docs/uger/uge1/eksempel-5/","title":"Eksempel 5 - LCD","section":"Uge 1 - 3","content":"Eksempel 1 - Sæt LCD op diagram op #  Her skal der bruges 1 LCD I2C display og 4 han til hun ledninger. Så skal de forbindes som der vises nedenunder.\nEksempel 1 - Hente biblotek til LCD #  For at kunne bruge vores LCD skal vi bruge et biblotek. Det biblotek kan findes igennem jeres Arduino program ved at gå op i Sketch -\u0026gt; Include Library -\u0026gt; Manage Libraries:\nOgså skal søge på den her LiquidCrystal:\nEksempel 1 - Kode til LCD #  #include \u0026lt;LiquidCrystal_I2C.h\u0026gt;#include \u0026lt;Wire.h\u0026gt; const int SCL_PIN = A5; const int SDA_PIN = A4;  LiquidCrystal_I2C lcd(0x27,16,2); // set the LCD address to 0x27 for a 16 chars and 2 line display  void setup() {  lcd.init(); // Initiere lcd display  lcd.backlight(); // Put backlight på displayet }   void loop() {  lcd.setCursor(0,0); // Sæt cursor på første linje første tegn  lcd.print(\u0026#34;Hello\u0026#34;); // Print besked på display  lcd.setCursor(0,1); // Sæte cursor på anden linje første tegn  lcd.print(\u0026#34;Coding Pirates!!!\u0026#34;);  delay(1000); } "}]